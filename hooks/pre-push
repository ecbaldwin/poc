#!/bin/bash

if [ "$(readlink -f / 2>/dev/null)" != "/" ]
then
    # Since this is a POC, I didn't want to deal with mktemp, readlink, tsort,
    # and potentially other incompatibilities.
    export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH
    if [ "$(readlink -f / 2>/dev/null)" != "/" ]
    then
        echo >&2 "If you're on a mac, please install GNU coreutils."
        exit 1
    fi
fi

if [ "$OBSOLESCENCE_POC" -ne 1 ]
then
    echo >&2 "Use https://github.com/git-obsolescence/poc to push"
    exit 1
fi

[ "$PRE_PUSH_CHANGES_PASS" = 1 ] && exit 0

# If this hook is not being called to figure out what changes to push, just
# exit with 0 to allow the push to proceed.
[ -z "$PRE_PUSH_CHANGES_REFS" ] && exec "$(dirname $(readlink -f "$0"))/pre-push-no-clobber" ${1+"$@"}

. "$(dirname $(readlink -f "$0"))/common.sh"

exec > $PRE_PUSH_CHANGES_REFS

remote="$1"
url="$2"

echo ${remote}

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
    if [ "$local_sha" = $z40 ]
    then
        # Delete a remote ref. Nothing to do in this case
        continue
    fi

    if [ "$remote_sha" = $z40 ]
    then
        # New branch, examine all commits
        range="$local_sha"
    else
        # Update to existing branch, examine new commits
        range="$remote_sha..$local_sha"
    fi

    for commit in $(git log --pretty=%H ${range})
    do
        change_id=$(get_change_id ${commit})
        git show-ref | awk -v sha=${change_id} '$2~"^refs/cheads/"sha {print$2}'
    done
done

exit 1
