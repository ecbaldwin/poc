#!/bin/bash

projectdir=$(cd $(dirname "$0")/.. && pwd)
. ${projectdir}/hooks/common.sh

# This wrapper attempts to fetch from a remote *and* grab intermediate obsolete
# commits in the obsolescence graph for each change that it fetches.

# git fetch doesn't run any hooks like git-push does so using the same approach
# isn't possible.

fetch_file=$(git rev-parse --git-dir)/FETCH_HEAD
# First run does the intended fetch
git fetch ${1+"$@"}

# Save the FETCH_HEAD file and put it back at the end
cp ${fetch_file}{,.save}
trap "cp ${fetch_file}{.save,}" EXIT

# Get the remote. Assumes only one remote. This is why fetch doesn't work for
# multiple. This is complicated by the fact that FETCH_HEAD doesn't include the
# user@ part of a remote URL and we need that to fetch from it. Also, I don't
# want to get into parsing all of the possible fetch options to figure out which
# one is the remote.
fetched_url=$(awk '{print$NF;exit}' ${fetch_file})
for arg in ${1+"$@"}
do
    case $arg in
    --multiple) echo >&2 "Multiple remotes not supported with obsoloscence poc"; exit 1 ;;
    esac

    # See if this is the argument representing the repository. Hackish
    if [[ ${arg} == *${fetched_url}* ]]
    then
        remote=${arg}
        break
    else
        remote_url=$(git remote get-url ${arg} 2>/dev/null)
        if [[ ${remote_url} == *${fetched_url}* ]]
        then
            remote=${remote_url}
            break
        fi
    fi
done

# needed builds a list of commits that we know are needed based on reading the
# obsoletes trailers in the new commits and following the obsolescence graph
# until referenced commits are missing.
needed() {
    # Lists new commits by running git log on the fetched HEADS and excluding
    # anything reachable from local refs.
    new_commits=$(git log --pretty=%H ${1+"$@"} --not $(git show-ref --heads --hash))

    for commit in $new_commits
    do
        list_missing_commits $commit
    done | sort -u
}

# Repeatedly fetch missing obsolete commits until we have them all.
# Yeah, I know. I couldn't think of a way to figure out all of the refs to
# fetch the first time.
while true
do
    fetched=$(awk '{print$1}' ${fetch_file})
    fetchme=$(needed ${fetched})

    [ -z "${fetchme}" ] && break

    git fetch ${remote} ${fetchme}
done

# Pin newly fetched obsolete commits to the repository
fetched=$(awk '{print$1}' ${fetch_file}.save)
new_commits=$(git log --pretty=%H ${fetched} --not $(git show-ref --heads --hash))
for commit in ${new_commits}
do
    pin_change $commit
done
