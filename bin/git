#!/bin/bash

if [ "$(readlink -f / 2>/dev/null)" != "/" ]
then
    # Since this is a POC, I didn't want to deal with mktemp, readlink, tsort,
    # and potentially other incompatibilities.
    export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH
    if [ "$(readlink -f / 2>/dev/null)" != "/" ]
    then
        echo >&2 "If you're on a mac, please install GNU coreutils."
        exit 1
    fi
fi

mydir=$(dirname "$0")

# TODO(Carl) Could this be more robust? It is a POC afterall.
# Remove the directory this script was found in from the path so that recursive
# invocations of git call "real" git.
export PATH=$(echo "$PATH" | sed s,${mydir}:,,g)

if [ "$(git config obsolescence.enabled)" != "true" ]
then
    exec $(basename "$0") ${1+"$@"}
fi

# Sometimes it is on the $PATH in multiple places.
[ "$OBSOLESCENCE_POC" = 1 ] && exec $(basename "$0") ${1+"$@"}

if test -L "$0"
then
    mydir=$(dirname "$(readlink -f "$0")")
fi

exe_name=$(basename $0)

subcommand=""
case $exe_name in
  git) subcommand=$1 ; shift ;;
  git-*) subcommand=${exe_name/git-/}
esac

# If the subcommand is rebase, commit, or push set up a hooks directory.
case $subcommand in
rebase|commit|push)
    newHooksPath=$(mktemp -d -t git.hooksPath.XXXXXX)

    if [ "$(git config extensions.worktreeConfig)" != "true" ]
    then
        echo >&2 "Please enable worktreeConfig with \`git config extensions.worktreeConfig true\`"
        exit 1
    fi
    oldLocalHooksPath=$(git config core.hooksPath)
    if [ $? -eq 0 ]
    then
        cleanup() {
            rm -rf ${newHooksPath}
            git config --worktree core.hooksPath ${oldLocalHooksPath}
        }
    else
        cleanup() {
            rm -rf ${newHooksPath}
            git config --worktree --unset core.hooksPath
        }
    fi
    trap cleanup EXIT

    oldHooksPath=$(git config core.hooksPath || echo "$(git rev-parse --absolute-git-dir)/hooks")
    find ${oldHooksPath} -type f -depth 1 | xargs -I {} ln -s {} ${newHooksPath}/

    repo=$(cd ${mydir} && git rev-parse --show-toplevel)
    for hook in post-rewrite pre-push
    do
        ln -sf ${repo}/hooks/${hook} ${newHooksPath}/${hook}
    done

    git config core.hooksPath ${newHooksPath}
;;
esac

export OBSOLESCENCE_POC=1

if [ -n "${subcommand}" -a -x "${mydir}/git-${subcommand}" ]
then
    ${mydir}/git-${subcommand} ${1+"$@"}
    exit
fi

git ${subcommand} ${1+"$@"}
