#!/usr/bin/env bash
# NOTE: This needs a newer bash than MacOS ships with. Hence, not using /bin/bash

# I'm not sure how to POC this without reimplementing much of what rebase
# already does. Until I get the critical mass of rebase functionality working,
# we'll have to carefully walk a thin line between implementing functionality
# in this script and deferring to regular git-rebase.

# I considered calling this "git evolve" following the example set in
# mercurial. However, that changes the user's workflow putting the decision to
# use it squarely on them. A goal is to eventaully prove that all of this can
# and should be baked into git rebase itself. It should not  be up to the user
# to know which one to use.

########################################################################
# Quick and dirty options parsing
########################################################################

export OBSOLESCENCE_POC_REBASING=1

opt_keep_base=false
opt_root=false
opt_interactive=false
opt_onto=
opt_exec=

opt_upstream=
opt_branch=

original_options=("$@")
extra_opts=()
while [ $# -gt 0 ]
do
    case $1 in
    --root) opt_root=true ; shift ;;
    --keep-base) opt_keep_base=true ; shift ;;
    -i|--interactive) opt_interactive=true ; shift ;;

    -x|--exec) opt_exec=$2 ; shift 2 ;;
    --onto) opt_onto=$2 ; shift 2 ;;

    --continue|--skip|--abort|--quit|--edit-todo|--show-current-patch)
        exec git rebase "${original_options[@]}"
    ;;

    *) extra_opts+=($1) ; shift ;;
    esac
done

if ${opt_keep_base} || (${opt_root} && [ -z "${opt_onto}" ])
then
    # If the base remains the same, defer everything to normal git rebase.
    exec git rebase "${original_options[@]}"
fi

set -- "${extra_opts[@]}"

if ! $opt_root && [ $# -ne 0 ]
then
    opt_upstream=$1
    shift
fi

if [ $# -ne 0 ]
then
    opt_branch=$1
    shift
fi

########################################################################
# Lots and lots of unimplemented cases to check ...
########################################################################

die() {
    echo >&2 ${1+"$@"}
    exit 1
}

[ $# -ne 0 ] && die "Unparsed options I don't understand: $@"

${opt_root} && die "--root not supported with obsolescence"

$opt_interactive && die "Interactive rebasing not yet supported. Use --keep-base for now"
[ -n "$opt_exec" ] && die "Interactive rebasing not yet supported (--exec). Use --keep-base for now"

[ -z "$opt_upstream" ] && die "For now, explicitly specify the upstream branch when using obsolescence"
[ -n "$opt_branch" ] && die "For now, don't specify branch when using obsolescence. Use git switch first."

########################################################################
# Get down to business
########################################################################

projectdir=$(cd $(dirname "$0")/.. && pwd)
. ${projectdir}/hooks/common.sh

# TODO(Carl) Consider keeping this state in the .git directory
export TMPDIR=$(mktemp -d -t git-rebase.XXXXXX)
trap "rm -rf $TMPDIR" EXIT

# The following algorithm finds a total ordering of changes between the local
# and the upstream branch to which we're rebasing.
#
# If a change exists in both branches, then it must be represented by different
# commits. Otherwise, the one commit would have been included in the merge base
# between the two. If neither commit is reachable from the other in the
# obsolescence graph, then the change is considered divergent and there must be
# a third common commit reachable from both. Otherwise, the reachable one *is*
# the common base.
#
# There may be changes that only exist in one or the other branch. This could
# either be because the change was added on one side or because the change was
# removed from the other side. We need to be able to tell the difference and
# this is where things get tricky. We need to identify common commits that are
# reachable from obsolescence graphs on both sides to find the common branch
# from which the two diverged.
#
# For added changes, we bias the algorithm so that changes added upstream come
# earlier if possible. This maximizes the number of changes that we could use
# as-is from upstream theryby minimizing the churn to the upstream branch. Look
# at it this way, if there are no common changes between the two branches, we
# would want all local changes to be rebased after the upstream changes and the
# commits on the upstream branch wouldn't need any rewriting at all. This is
# accomplished by traversing upstream edges before local edges.
#
# The total ordering of changes comes from combining edges from upstream, local,
# and common branches and traversing the result to find a topological ordering
# of changes. An edge is from a change pointing to the change immediately
# preceding it in that branch. As changes get reordered either upstream or
# locally, the resulting graph can end up with cycles. The algorithm needs to
# remove edges to break cycles so that the resulting graph is a DAG. To
# accomplish this, a weight is computed for each edge depending on in which
# branch(es) they appear.
#
# If an edge appears in the upstream branch, 3 is added to its weight. If it
# appears in the local branch, a 4 is added to its weight. The reason local
# ordering is given a higher weight is to prefer local ordering over upstream
# ordering in the event that changes are reordered differently in the two
# branches creating a tie-breaker situation.
#
# If an edge appears in the common branch, 2 is *subtracted* from its weight.
# This may not seem intuitive at first but can be understood by realizing that
# if an edge exists in the common branch but not one or both of the upstream
# and local branches then someone removed it. We want to discard removed edges.
# If no one removed it, then subtracting 2 isn't enough to remove the edge from
# consideration. The following 7 permutations are possible for each edge
# ordered by weight. The 8th theoretical permutation can be ignored since such
# an edge doesn't exist in any branch and the weight would be 0.
#
#         upstream, not common,     local = 7  # This ordering was added on both branches
#         upstream,     common,     local = 5  # This ordering was not changed
#
#     not upstream, not common,     local = 4  # This ordering was added locally
#         upstream, not common, not local = 3  # This ordering was added upstream
#
#     not upstream,     common,     local = 2  # This ordering was removed upstream
#         upstream,     common, not local = 1  # This ordering was removed locally
#     not upstream,     common, not local = -2 # This ordering was removed on both sides
#
# Edges with a weight of less than 3 can be discarded immediately since they
# were removed on one or both sides. The changes from those edges were either
# removed entirely are in an added edge. When performing a depth-first search
# and a cycle is encountered, the lowest weight edge should be dropped to break
# the cycle.

# commits introduced by local branch
git >$TMPDIR/local_commits log --topo-order --pretty=%H --reverse ${opt_upstream}..HEAD
local_commits=$(<$TMPDIR/local_commits)
if [ -z "${local_commits}" ]
then
    exec git rebase "${original_options[@]}"
fi

# upstream commits which aren't in the local branch
git >$TMPDIR/upstream_commits \
    log \
    --topo-order \
    --pretty=%H  \
    --reverse \
    HEAD..${opt_upstream} \
    --not "${stable_branches[@]}"
upstream_commits=$(<$TMPDIR/upstream_commits)
if [ -z "${upstream_commits}" ]
then
    exec git rebase "${original_options[@]}"
fi

# Compute the set of changes both upstream and locally
previous="<base>"
for commit in ${local_commits}
do
    change_id=$(get_change_id ${commit})
    if [ $? -ne 0 ]
    then
        echo >&2 "Couldn't find change_id for ${commit}"
        exit 1
    fi
    echo >>$TMPDIR/local_changes ${change_id}
    echo >>$TMPDIR/local_edges "${change_id} ${commit}"
    echo >>$TMPDIR/raw_dag "${change_id} ${previous} 4"
    previous=${change_id}
done

[ $? -ne 0 ] && exit 1

previous="<base>"
for commit in ${upstream_commits}
do
    # Upstream is not required to have full obsolescence graphs for all
    # changes. If it doesn't, assume that the change doesn't exist locally.
    # Use the commit id as a stand-in for the change id if necessary.
    change_id=$(get_change_id ${commit} || echo ${commit})
    echo >>$TMPDIR/upstream_changes ${change_id}
    echo >>$TMPDIR/upstream_edges "${change_id} ${commit}"
    echo >>$TMPDIR/raw_dag "${change_id} ${previous} 3"
    previous=${change_id}
done

# mark_commits_recursive is a helper not meant to be called directly
mark_commits_recursive() {
    local me=$1
    visited[$me]=1

    for adjacent in $(list_obsoletes $me)
    do
        [ "$visited[$adjacent]" != 1 ] && mark_commits_recursive ${adjacent}
    done
}

# first_marked_commit_recursive is a helper not meant to be called directly
first_marked_commit_recursive() {
    local me=$1
    if [ "$visited[$me]" == 1 ]
    then
        echo $me
	return 0
    fi

    bvisited[$me]=1

    for adjacent in $(list_obsoletes $me)
    do
        [ "$bvisited[$adjacent]" != 1 ] && first_marked_commit_recursive ${adjacent} && return
    done

    return 1
}

find_common_commit() {
    local -A visited
    mark_commits_recursive $1

    local -A bvisited
    first_marked_commit_recursive $2
}

# Find common changes
grep -f $TMPDIR/local_changes $TMPDIR/upstream_changes > $TMPDIR/common_changes
if ! test -s $TMPDIR/common_changes
then
    exec git rebase "${original_options[@]}"
fi

# Find common commits
for common in $TMPDIR/common_changes
do
    local_commit=$(awk -v change=${change} '$1 == change {print$2}' $TMPDIR/local_edges)
    upstream_commit=$(awk -v change=${change} '$1 == change {print$2}' $TMPDIR/upstream_edges)
    find_common_commit $upstream_commit $local_commit
done >$TMPDIR/common_commits

# upstream commits which aren't in the local branch
git >$TMPDIR/all_common_commits \
    log \
    --topo-order \
    --pretty=%H  \
    --reverse \
    $(<$TMPDIR/common_commits) \
    --not "${stable_branches[@]}"
common_commits=$(<$TMPDIR/all_common_commits)

# Compute the set of changes both upstream and locally
previous="<base>"
for commit in ${common_commits}
do
    change_id=$(get_change_id ${commit})
    if [ $? -ne 0 ]
    then
        echo >&2 "Couldn't find change_id for ${commit}"
        exit 1
    fi
    echo >>$TMPDIR/all_common_changes ${change_id}
    echo >>$TMPDIR/all_common_edges "${change_id} ${commit}"
    echo >>$TMPDIR/raw_dag "${change_id} ${previous} -2"
    previous=${change_id}
done

declare -A dag
while read change previous weight
do
    dag["${change} ${previous}"]=$((dag["${change} ${previous}"]+weight))
done <$TMPDIR/raw_dag

for key in "${!dag[@]}"
do
    value=${dag[$key]}
    [ $value -ge 3 ] && echo "$key $value"
done | sort -n -k 2 >$TMPDIR/dag

bash

# TODO(Carl) This algorithm should be biased to place changes added locally
# toward the end of the list and changes added upstream to the beginning.
awk '{print$1,$2}' $TMPDIR/dag | tsort >$TMPDIR/total_order
if [ $? -ne 0 ]
then
    # TODO(Carl) breaks cycles until it can be ordered.
    die "tsort failed (presumably a cycle), implement me"
fi

total_order=$(tac $TMPDIR/total_order | grep -v "<base>")

# TODO(Carl) Honor autostash
# TODO(Carl) Save the currently checked-out state so that we can abort

original_branch=$(git branch --show-current)
git switch --detach $(git merge-base HEAD ${opt_upstream})

# reachable_recursive is a helper that shouldn't be called directly
reachable_recursive() {
    local me=$1
    visited[$me]=1

    [ "$me" = "$quarry" ] && return 0

    for adjacent in $(list_obsoletes $me)
    do
        [ "$visited[$adjacent]" != 1 ] && reachable_recursive "$adjacent" && return 0
    done
    return 1
}

# reachable returns 0 if the second argument is reachable over the obsolescence
# graph from the first. Otherwise, it returns non-zero. If the two are equal,
# it considers them reachable (returns 0).
reachable() {
    local quarry=$2
    local -A visited
    reachable_recursive $1
}

# commits_in_change_recursive is a helper not meant to be called 
commits_in_change_recursive() {
    local me=$1
    visited[$me]=1

    for adjacent in $(list_obsoletes $me)
    do
        [ "$visited[$adjacent]" != 1 ] && commits_in_change_recursive "${adjacent}"
    done

    echo "$me"
}

# lists all of the commits reachable from the commit in the obsolescence graph
commits_in_change() {
    local -A visited
    commits_in_change_recursive "$1"
}

# get_change_base returns the nearest common commit in the obsolescence graph.
# This is analogous to git-merge-base except that it follows obsolescence
# graphs and is probably a lot more naive.
get_change_base() {
    local a=$1
    local b=$2

    # Write all of the commits reachable from the two commits in topological order
    commits_in_change $a >$TMPDIR/a
    commits_in_change $b >$TMPDIR/b

    # Print the lines common to the two and tail the last one as the change base.
    fgrep --line-regexp --file $TMPDIR/a $TMPDIR/b | tail -n1
}

for change in ${total_order}
do
    local_commit=$(awk -v change=${change} '$1 == change {print$2}' $TMPDIR/local_edges)
    upstream_commit=$(awk -v change=${change} '$1 == change {print$2}' $TMPDIR/upstream_edges)

    # TODO(Carl) a change might be missing from one side or the other because
    # it was removed. Need to figure out if the change was reference from any
    # of the common change history.

    if [ -z "${local_commit}" ]
    then
        git cherry-pick --ff ${upstream_commit}
        if [ $? -ne 0 ]
        then
            die "cherry-pick of upstream (${upstream_commit}) failed. implement me"
        fi
        continue
    fi

    if [ -z "${upstream_commit}" ]
    then
        git cherry-pick --ff ${local_commit}
        if [ $? -ne 0 ]
        then
            die "cherry-pick of local (${local_commit}) failed. implement me"
        fi
        continue
    fi

    # Change exists in both branches. We need to find where it is common.
    base=$(get_change_base ${local_commit} ${upstream_commit})

    # Cherry-pick all three to the current HEAD so that they can be merged
    git cherry-pick --ff ${base}
    [ $? -eq 0 ] || die "cherry-picking the base commit failed"
    base_rebased=$(git rev-parse HEAD)
    git reset --hard HEAD~

    git cherry-pick --ff ${upstream_commit}
    [ $? -eq 0 ] || die "cherry-picking the upstream commit failed"
    upstream_rebased=$(git rev-parse HEAD)
    git reset --hard HEAD~

    git cherry-pick --ff ${local_commit}
    [ $? -eq 0 ] || die "cherry-picking the new commit failed"
    new_rebased=$(git rev-parse HEAD)
    git reset --hard HEAD~

    git read-tree -m -u ${base_rebased} ${new_rebased} ${upstream_rebased}

    trailers=(--trailer obsoletes:${upstream_commit} --trailer obsoletes:${local_commit})

    tree=$(git write-tree)
    if [ $? -ne 0 ]
    then
        die "Write tree failed"
    fi

    # TODO(Carl) Merge commit messages? How would conflicts be handled.
    commit=$(git log -1 --pretty=%B ${local_commit} |
        grep -v "^obsoletes: " |
        git interpret-trailers "${trailers[@]}" |
        git commit-tree ${tree} -p HEAD)
    if [ $? -ne 0 ]
    then
        die "Commit failed"
    fi
    git reset ${commit}
done

if [ -n "${original_branch}" ]
then
    git checkout -B ${original_branch}
fi
